{"ast":null,"code":"var _jsxFileName = \"/home/talita-pessoal/Documentos/GitHub/react-project/src/Components/ModalComponent.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport CurrencyInput from 'react-currency-masked-input';\nimport './Style/App.css';\nimport ListUser from './ListUsersComponent';\nimport ModalPay from './ModalPayComponent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Modal = ({\n  id = 'containerModal',\n  onClose = () => {},\n  children\n}) => {\n  _s();\n\n  const [cardsProfile, setCardsProfile] = useState([]);\n  const [modalPayDisplay, setModalPayDisplay] = useState(false);\n  let cards = [// valid card\n  {\n    card_number: '1111111111111111',\n    cvv: 789,\n    expiry_date: '01/18'\n  }, // invalid card\n  {\n    card_number: '4111111111111234',\n    cvv: 123,\n    expiry_date: '01/20'\n  }];\n\n  const handleOutsideClick = e => {\n    if (e.target.id == id) onClose();\n  }; // ‘Form’ is the state of the form itself and ‘setForm’ is the method built into useState that allows us to update the state of the form\n\n\n  const [form, setForm] = useState({});\n  const [errors, setErrors] = useState({}); // The handleChange will serve to capture the values ​​of the inputs\n  // With the ‘… form’, take the general state and transform the target.name by the target.value, which is taken from the input.\n\n  function handleChange(event) {\n    setForm({ ...form,\n      [event.target.name]: event.target.value\n    });\n  } // If the input is empty, it will signal. So this function is called inside the setErrors method on the handleSubmit\n\n\n  function validate() {\n    let errors = {};\n\n    if (!form.name) {\n      errors.name = '*Preencha com um valor válido.';\n    }\n\n    return errors;\n  } // handleSubmit will serve as an error validator\n\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    setErrors(validate(form));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: id,\n    className: \"boxModal\",\n    onClick: handleOutsideClick,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"containerModal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"containerHeaderModal\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"headerPay\",\n          children: [\"Pagamento para \", ListUser.window.nome]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"containerBodyModal\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: e => handleSubmit(e),\n          children: [/*#__PURE__*/_jsxDEV(CurrencyInput, {\n            name: \"name\",\n            className: \"inputValue\",\n            placeholder: \"R$ 0,00\",\n            onChange: e => handleChange(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 25\n          }, this), errors.name && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"errorInput\",\n            children: errors.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 41\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: cardsProfile,\n            onChange: e => setCardsProfile(e.target.value),\n            className: \"selectCard\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"selection\",\n              disabled: true,\n              selected: true,\n              children: \"Selecione o cart\\xE3o\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 29\n            }, this), cards.map((item, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: item.key,\n              children: [\"Cart\\xE3o com final \", item.card_number.substring(12, 16)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"buttonPayModal\",\n            onClick: () => {\n              setModalPayDisplay(true);\n            },\n            children: \"Pagar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 25\n          }, this), modalPayDisplay ? /*#__PURE__*/_jsxDEV(ModalPay, {\n            onClose: () => setModalPayDisplay(false)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 29\n          }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content\",\n            children: children\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Modal, \"b62McueGwMtETRDJ/g3iuwLs7y4=\");\n\n_c = Modal;\nexport default Modal;\n\nvar _c;\n\n$RefreshReg$(_c, \"Modal\");","map":{"version":3,"sources":["/home/talita-pessoal/Documentos/GitHub/react-project/src/Components/ModalComponent.jsx"],"names":["React","useState","CurrencyInput","ListUser","ModalPay","Modal","id","onClose","children","cardsProfile","setCardsProfile","modalPayDisplay","setModalPayDisplay","cards","card_number","cvv","expiry_date","handleOutsideClick","e","target","form","setForm","errors","setErrors","handleChange","event","name","value","validate","handleSubmit","preventDefault","window","nome","map","item","index","key","substring"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport CurrencyInput from 'react-currency-masked-input';\nimport './Style/App.css';\nimport ListUser from './ListUsersComponent';\nimport ModalPay from './ModalPayComponent'\n\nconst Modal = ({ id = 'containerModal', onClose = () => { }, children }) => {\n\n    const [cardsProfile, setCardsProfile] = useState([]);\n    const [modalPayDisplay, setModalPayDisplay] = useState(false);\n\n    let cards = [\n        // valid card\n        {\n            card_number: '1111111111111111',\n            cvv: 789,\n            expiry_date: '01/18',\n        },\n        // invalid card\n        {\n            card_number: '4111111111111234',\n            cvv: 123,\n            expiry_date: '01/20',\n        },\n    ];\n\n    const handleOutsideClick = (e) => {\n        if (e.target.id == id) onClose();\n    };\n\n    // ‘Form’ is the state of the form itself and ‘setForm’ is the method built into useState that allows us to update the state of the form\n    const [form, setForm] = useState({})\n    const [errors, setErrors] = useState({})\n\n    // The handleChange will serve to capture the values ​​of the inputs\n    // With the ‘… form’, take the general state and transform the target.name by the target.value, which is taken from the input.\n    function handleChange(event) {\n        setForm({\n            ...form,\n            [event.target.name]: event.target.value\n        })\n    }\n\n    // If the input is empty, it will signal. So this function is called inside the setErrors method on the handleSubmit\n    function validate() {\n        let errors = {};\n        if (!form.name) {\n            errors.name = '*Preencha com um valor válido.'\n        }\n        return errors;\n    }\n\n    // handleSubmit will serve as an error validator\n    function handleSubmit(event) {\n        event.preventDefault();\n        setErrors(validate(form));\n    }\n\n    return (\n        <div id={id} className='boxModal' onClick={handleOutsideClick}>\n            <div className='containerModal'>\n                <div className='containerHeaderModal'>\n                    <div className='headerPay'>Pagamento para {ListUser.window.nome}</div>\n                </div>\n                <div className='containerBodyModal'>\n                    <form onSubmit={e => handleSubmit(e)}>\n                        <CurrencyInput name='name' className='inputValue' placeholder='R$ 0,00' onChange={e => handleChange(e)} />\n                        {errors.name && <p className='errorInput'>{errors.name}</p>}\n                        <select value={cardsProfile} onChange={e => setCardsProfile(e.target.value)} className='selectCard'>\n                            <option value='selection' disabled selected>Selecione o cartão</option>\n                            {cards.map((item, index) => (\n                                <option value={item.key}>Cartão com final {item.card_number.substring(12, 16)}</option>\n                            ))}\n                        </select>\n                        <button id='buttonPayModal' onClick={() => { setModalPayDisplay(true) }}>Pagar</button>\n                        {modalPayDisplay ? (\n                            <ModalPay onClose={() => setModalPayDisplay(false)} />) : null}\n                        <div className='content'>{children}</div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Modal;"]},"metadata":{},"sourceType":"module"}